task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
}
repositories {
  mavenCentral()
}
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.github.maiflai:gradle-scalatest:0.3'
  }
}

def groupId = 'org.suecarter'
def artifactName = 'tablediff'
def versionId = '1.0'
def githubLocation = 'smootoo/TableDiff'

ext {
  // only need to build one version for each major scala release
  scalaVersions = ['2_9_3', '2_10_4', '2_11_4']
}

apply plugin: 'maven'
apply plugin: 'signing'
for (sv in scalaVersions) {
  String scalaVersionTask = sv.replaceAll("_", ".")
  def (major, minor, trivial) = scalaVersionTask.tokenize('.')
  String baseScalaVersion = "${major}.${minor}"
  tasks.create(name: "jar_core_${sv}", type: GradleBuild) {
    buildFile = './build.gradle'
    tasks = ['test', 'jar']
    scalaVersionTask = "${scalaVersionTask}"
    startParameter.projectProperties = [scalaVersion: "${scalaVersionTask}"]
  }
  tasks.create(name: "idea_${sv}", type: GradleBuild) {
    buildFile = './build.gradle'
    tasks = ['idea']
    startParameter.projectProperties = [scalaVersion: "${scalaVersionTask}"]
  }
  tasks.create(name: "srcJar_${sv}", type: GradleBuild) {
    buildFile = './build.gradle'
    tasks = ['srcJar']
    startParameter.projectProperties = [scalaVersion: "${scalaVersionTask}"]
  }
  tasks.create(name: "docsJar_${sv}", type: GradleBuild) {
    buildFile = './build.gradle'
    tasks = ['docsJar']
    startParameter.projectProperties = [scalaVersion: "${scalaVersionTask}"]
  }
  tasks.create(name: "uploadCoreArchives_${sv}", type: GradleBuild) {
    buildFile = './build.gradle'
    tasks = ['test', 'uploadArchives']
    startParameter.projectProperties = [scalaVersion: "${scalaVersionTask}"]
  }
}
tasks.create(name: "jarAll", dependsOn: scalaVersions.collect({ 'jar_core_' + it })) {
}
tasks.create(name: "srcJarAll", dependsOn: scalaVersions.collect({ 'srcJar_' + it })) {
}
tasks.create(name: "docsJarAll", dependsOn: scalaVersions.collect({ 'docsJar_' + it })) {
}
tasks.create(name: "uploadArchivesAll", dependsOn: scalaVersions.collect({ 'uploadCoreArchives_' + it })) {
}

if (project.hasProperty('mavenUrl') && project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
  uploadArchives {
    repositories {
      signing {
        sign configurations.archives
// To test locally, replace mavenUrl in ~/.gradle/gradle.properties to file://localhost/tmp/myRepo/
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
          repository(url: "${mavenUrl}/service/local/staging/deploy/maven2") {
            authentication(userName: "${mavenUsername}", password: "${mavenPassword}")
          }
          snapshotRepository(url: "${mavenUrl}/content/repositories/snapshots") {
            authentication(userName: "${mavenUsername}", password: "${mavenPassword}")
          }
          afterEvaluate {
            pom.artifactId = "${archivesBaseName}"
            pom.project {
              name groupId + ':' + artifactName
              description 'Utility for finding a diff of 2 tables, taking account of their structure'
              packaging 'jar'
              url "https://github.com/${githubLocation}"
              licenses {
                license {
                  name 'MIT-style license'
                  url 'http://opensource.org/licenses/MIT'
                  distribution 'repo'
                }
              }
              scm {
                connection "scm:git:git@github.com:${githubLocation}.git"
                developerConnection "scm:git:git@github.com:${githubLocation}.git"
                url "git@github.com:${githubLocation}.git"
              }
              developers {
                developer {
                  name 'Sue Carter'
                  email 'squishback@gmail.com'
                  organizationUrl 'https://github.com/smootoo'
                }
              }
            }
          }
        }

      }
    }
  }
}

def scalaVersion = this.properties.get('scalaVersion')
if (scalaVersion != null) {
  println("Running for scala version ${scalaVersion}")

  apply plugin: 'idea'
  apply plugin: 'scala'
  apply plugin: 'scalatest'
  tasks.withType(Javadoc) {
    task srcJar(type: Jar) {
      classifier = 'sources'
      from sourceSets.main.java
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier 'javadoc'
      from javadoc.destinationDir
    }
    task docsJar(type: Jar, dependsOn: javadocJar) {}
    artifacts {
      archives srcJar
      archives javadocJar
    }
  }
  tasks.withType(ScalaCompile) {
    task srcJar(type: Jar, overwrite: true) {
      classifier = 'sources'
      from sourceSets.main.scala
      from sourceSets.main.java
    }
    // hmmm zinc not working at the moment
    //scalaCompileOptions.useAnt = false
    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
      jvmArgs = ['-XX:MaxPermSize=512m']
    }
  }
  tasks.withType(ScalaDoc) {
    exclude "**/*.java" // I mix scala and java under src/main/scala
    task scaladocJar(type: Jar) {
      classifier = 'scaladoc'
      from scaladoc
    }
    task docsJar(type: Jar, dependsOn: ['javadocJar', 'scaladocJar'], overwrite: true) {}
    artifacts {
      archives scaladocJar
    }
  }
  def (major, minor, trivial) = scalaVersion.tokenize('.')
  def minorInt = Integer.parseInt(minor)
  def shortScalaVersion = "${major}.${minor}"
  archivesBaseName = "tablediff_${shortScalaVersion}"
  group = groupId
  version = versionId
  dependencies {
    compile "org.scala-lang:scala-library:$scalaVersion"
    if (minorInt >= 11) {
      compile "org.scala-lang.modules:scala-parser-combinators_$shortScalaVersion:1.0.2"
    }
    compile 'org.apache.commons:commons-lang3:3.1'
    if (minorInt >= 10) {
      testCompile "org.scalatest:scalatest_${shortScalaVersion}:2.2.2"
    } else {
      testCompile "org.scalatest:scalatest_$scalaVersion:2.0.M5b"
    }
    zinc 'com.typesafe.zinc:zinc:0.2.5'
    testRuntime 'org.pegdown:pegdown:1.1.0'
  }
} else {
  println('Created tasks for each Scala environment in ' + scalaVersions)
}

